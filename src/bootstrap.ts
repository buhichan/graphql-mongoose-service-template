/**
 * Generated by 小🐔小🐔咕咕嘚.
 */

import {InitApp} from "guguder";
import {List,Record} from "immutable";
import createBrowserHistory from "history/createBrowserHistory";
import { reducer as reduxFormReducer } from "redux-form"
import {RouterAction, routerMiddleware, routerReducer} from "react-router-redux";

/* Use material theme of grid and form */
import "ag-grid-presets/style.css"
import "ag-grid-presets/src/ant-design"
import "redux-schema-form/src/antd"
import {ResourceReducer} from "redux-restful-resource";
// import { TypedMap } from "./typed-map";
import { IModel } from "./services/api";


type TypedRecord<T> = Record<T> & T
type IndexedMap = {[key:string]:any}

export type RootState = TypedRecord<{
    form:any,
    routing:{
        location:Location,
    },
}>

const initialState = {
    form:{} as IndexedMap,
    routing:{
        location:{} as Location,
    },
    models:List<IModel>()
}

const reduxFormActionType = /^@@redux-form/;
const routerType = /^@@router/;

export const history = createBrowserHistory();

const app = InitApp<TypedRecord<typeof initialState>>({
    middlewares:[routerMiddleware(history)],
    reducers:[
        ResourceReducer as any,
        (state,action)=>{
            if(reduxFormActionType.test(action.type))
                return state.set('form',reduxFormReducer(state.form,action));
            else return state;
        },
        (state,action)=>{
            if(routerType.test(action.type))
                return state.set('routing',routerReducer(state.routing as any,action as RouterAction) as any);
            else return state;
        }
    ],
    initialState
});

export const {ReduxComponent,ReduxService} = app;

export function getStore(){
    return app.store;
}